{"version":3,"sources":["app/hooks.ts","features/movies/moviesApi.ts","features/movies/moviesSlice.ts","features/movies/MovieRow.tsx","common/components/CustomPagination.tsx","features/movies/MoviesList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","API_KEY","process","delay","duration","Promise","resolve","setTimeout","page","a","Math","random","Error","fetch","response","json","data","status","status_code","status_message","results","map","item","id","image","backdrop_path","title","rating","vote_average","year","release_date","substr","MoviesLoadingStatus","MOVIES_NS","moviesAdapter","createEntityAdapter","selectId","movie","createPage","IDLE","getInitialState","error","initialState","currentPageIndex","requestedPage","pages","fetchMovies","createAsyncThunk","moviesReducer","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","newPageIndex","meta","arg","LOADING","fulfilled","loadedPageIndex","addMany","payload","SUCCEEDED","rejected","message","FAILED","reducer","selectMoviesSubState","globalState","selectCurrentPageIndex","createSelector","selectRequestedPageIndex","selectCurrentPage","pageIndex","selectRequestedPage","selectCurrentPageStatus","selectRequestedPageStatus","selectRequestedPageError","selectMoviesData","movieSelectors","selectMovies","getSelectors","selectAll","useStyles","makeStyles","root","flexGrow","fontSize","textSecondary","thumbnail","height","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","MovieRow","classes","Box","marginY","Grid","className","container","spacing","component","Paper","alignItems","xs","square","variant","direction","justify","Typography","color","align","wrapper","display","gridTemplateColumns","pagination","margin","width","requested","border","CustomPagination","loading","otherProps","CircularProgress","size","Pagination","siblingCount","boundaryCount","count","shape","renderItem","PaginationItem","MoviesList","dispatch","useDispatch","currentPage","movies","currentPageStatus","requestedPageStatus","requestedPageError","useEffect","useState","showErrorAlert","setShowErrorAlert","errorAlertText","setErrorAlertText","handleCloseErrorAlert","event","reason","isLoading","onChange","defaultPage","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","Container","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.648c6c59.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Movie } from './Movie';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\ntype MoviesResponseItem = {\n    id: string,\n    backdrop_path: string,\n    title: string,\n    vote_average: string,\n    release_date: string,\n};\n\nconst delay = (duration: number = 1000) => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function fetchMoviesRequest (page: number): Promise<Movie[]> {\n    await delay(500 + Math.random() * 2000); // for demonstration purposes\n\n    if (Math.random() > 0.6) {\n        throw new Error('Error for demonstration purposes - retry loading pressing on the desired page number again');\n    }\n\n    const response = await fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&page=${page}`);\n    const data = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(`Failed to load movies, because of [${response.status}] ${data.status_code} ${data.status_message}`);\n    }\n\n    return data.results.map((item: MoviesResponseItem) => ({\n        id: item.id,\n        image: `https://image.tmdb.org/t/p/w300/${item.backdrop_path}`,\n        title: item.title,\n        rating: item.vote_average,\n        year: item.release_date.substr(0, 4)\n    }));\n}\n","import { ActionReducerMapBuilder, createAsyncThunk, createEntityAdapter, createSelector, createSlice, EntityState } from \"@reduxjs/toolkit\";\nimport { Movie } from './Movie';\nimport { fetchMoviesRequest } from './moviesApi';\n\nexport const MOVIES_NS = 'movies';\nexport const DEFAULT_PAGE = 1;\n\nexport enum MoviesLoadingStatus {\n    IDLE,\n    LOADING,\n    SUCCEEDED,\n    FAILED\n}\n\ntype MoviePage = {\n    data: EntityState<Movie>,\n    status: MoviesLoadingStatus,\n    error: string | null\n}\n\ntype MovieState = {\n    currentPageIndex: number,\n    requestedPage: number | null,\n    pages: Record<number, MoviePage>\n}\n\nconst moviesAdapter = createEntityAdapter<Movie>({\n    selectId: (movie) => movie.id,\n    // sortComparer: (a, b) => a.rating - b.rating,\n});\n\nconst createPage = (status: MoviesLoadingStatus = MoviesLoadingStatus.IDLE) => ({\n    data: moviesAdapter.getInitialState(),\n    status,\n    error: null\n});\n\nconst initialState: MovieState = {\n    currentPageIndex: DEFAULT_PAGE,\n    requestedPage: null,\n    pages: {}\n};\n\nexport const fetchMovies = createAsyncThunk(`${MOVIES_NS}/fetchMovies`, fetchMoviesRequest);\n\nconst moviesSlice = createSlice({\n    name: MOVIES_NS,\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder: ActionReducerMapBuilder<MovieState>) => {\n        builder.addCase(fetchMovies.pending, (state: MovieState, action) => {\n            const newPageIndex = action.meta.arg;\n            if (!state.pages[newPageIndex]) {\n                state.pages[newPageIndex] = createPage(MoviesLoadingStatus.LOADING);\n            }\n            const page = state.pages[newPageIndex];\n            page.status = MoviesLoadingStatus.LOADING;\n            state.requestedPage = newPageIndex;\n        });\n        builder.addCase(fetchMovies.fulfilled, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n\n            moviesAdapter.addMany(page.data, action.payload);\n            page.status = MoviesLoadingStatus.SUCCEEDED;\n            if (state.requestedPage === loadedPageIndex) {\n                state.currentPageIndex = loadedPageIndex;\n            }\n        });\n        builder.addCase(fetchMovies.rejected, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n            page.error = action.error.message || 'Request failed';\n            page.status = MoviesLoadingStatus.FAILED;\n        });\n    }\n});\n\nexport const moviesReducer = moviesSlice.reducer;\n\nconst selectMoviesSubState = (globalState: { [MOVIES_NS]: MovieState }) => globalState[MOVIES_NS];\nconst selectCurrentPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.currentPageIndex);\nconst selectRequestedPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.requestedPage);\nconst selectCurrentPage = createSelector([selectMoviesSubState, selectCurrentPageIndex], (state: MovieState, pageIndex) => state.pages[pageIndex] || createPage());\nconst selectRequestedPage = createSelector([selectMoviesSubState, selectRequestedPageIndex], (state: MovieState, pageIndex) => typeof pageIndex === 'number' && state.pages[pageIndex] || createPage());\nconst selectCurrentPageStatus = createSelector([selectCurrentPage], (page: MoviePage) => page.status);\nconst selectRequestedPageStatus = createSelector([selectRequestedPage], (page: MoviePage) => page.status);\nconst selectRequestedPageError = createSelector([selectRequestedPage], (page: MoviePage) => page.status === MoviesLoadingStatus.FAILED ? page.error : null);\nconst selectMoviesData = createSelector([selectCurrentPage], (page: MoviePage) => page.status === MoviesLoadingStatus.SUCCEEDED ? page.data : moviesAdapter.getInitialState());\n\nconst { selectAll: selectMovies } = moviesAdapter.getSelectors(selectMoviesData);\n\nexport const movieSelectors = {\n    selectCurrentPageIndex,\n    selectCurrentPageStatus,\n    selectMovies,\n    selectRequestedPageError,\n    selectRequestedPageIndex,\n    selectRequestedPageStatus\n};\n","import { Box, Paper, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { FunctionComponent } from 'react';\nimport { Movie } from './Movie';\n\ntype MovieRowProps = {\n    data: Movie\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1\n    },\n    title: {\n        fontSize: '3vw'\n    },\n    textSecondary: {\n        fontSize: '2vw'\n    },\n    thumbnail: {\n        height: '10vw',\n        backgroundImage: (data: Movie) => `url(${data.image})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n    }\n});\n\nconst MovieRow: FunctionComponent<MovieRowProps> = ({ data }) => {\n    const classes = useStyles(data);\n\n    return (\n        <Box marginY={2}>\n            <Grid className={classes.root} container spacing={2} component={Paper} alignItems=\"stretch\">\n                <Grid item xs={3}>\n                    <Paper className={classes.thumbnail} square variant=\"outlined\"/>\n                </Grid>\n                <Grid item xs={9} container direction=\"column\" justify=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"body2\" className={classes.title}>\n                            {data.title}\n                        </Typography>\n                    </Grid>\n                    <Grid item container direction=\"row\" justify=\"space-between\">\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\">\n                                Year: {data.year}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\" align=\"right\">\n                                Rating: {data.rating}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default MovieRow;\n","import { ChangeEvent, FunctionComponent } from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { PaginationItem, Pagination, PaginationRenderItemParams } from '@material-ui/lab';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        display: 'grid',\n        gridTemplateColumns: '30px 1fr'\n    },\n    pagination: {\n        display: 'block',\n        margin: '0 auto',\n        width: 'fit-content'\n    },\n    requested: {\n        border: '1px solid #eee'\n    }\n});\n\ntype CustomPaginationProps = {\n    onChange: (event: ChangeEvent<unknown>, page: number) => void,\n    defaultPage: number,\n    page: number,\n    loading: boolean,\n    requestedPage: number | null\n};\n\nconst CustomPagination: FunctionComponent<CustomPaginationProps> = ({ loading, requestedPage, ...otherProps }) => {\n    const classes = useStyles();\n\n    const renderItem = (item: PaginationRenderItemParams) => {\n        const className = item.page === requestedPage ? classes.requested : '';\n        return <PaginationItem className={className} {...item} />\n    };;\n\n    return (\n        <Box className={classes.wrapper}>\n            {loading ? <CircularProgress size={20} /> : <div />}\n            <Pagination\n                className={classes.pagination}\n                siblingCount={2}\n                boundaryCount={2}\n                count={25}\n                shape=\"rounded\"\n                renderItem={renderItem}\n                {...otherProps}\n            />\n        </Box>\n    );\n};\n\nexport default CustomPagination;\n","import { ChangeEvent, FunctionComponent, useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { movieSelectors, fetchMovies, MoviesLoadingStatus, DEFAULT_PAGE } from './moviesSlice';\nimport MovieRow from './MovieRow';\nimport { Box, Snackbar } from '@material-ui/core';\nimport CustomPagination from '../../common/components/CustomPagination';\nimport { Alert } from '@material-ui/lab';\n\nconst MoviesList: FunctionComponent = () => {\n    const dispatch = useAppDispatch();\n    const currentPage = useAppSelector(movieSelectors.selectCurrentPageIndex);\n    const movies   = useAppSelector(movieSelectors.selectMovies);\n    const currentPageStatus = useAppSelector(movieSelectors.selectCurrentPageStatus);\n    const requestedPage = useAppSelector(movieSelectors.selectRequestedPageIndex);\n    const requestedPageStatus = useAppSelector(movieSelectors.selectRequestedPageStatus);\n    const requestedPageError = useAppSelector(movieSelectors.selectRequestedPageError);\n\n    useEffect(() => {\n        if (currentPageStatus === MoviesLoadingStatus.IDLE) {\n            dispatch(fetchMovies(currentPage));\n        }\n    }, [currentPageStatus, currentPage, dispatch]);\n\n    const handlePaginationChange = (event: ChangeEvent<unknown>, page: number) => {\n        dispatch(fetchMovies(page))\n    };\n\n    const [showErrorAlert, setShowErrorAlert] = useState(false);\n    const [errorAlertText, setErrorAlertText] = useState('Something went wrong...');\n\n    const handleCloseErrorAlert = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setShowErrorAlert(false);\n    };\n\n    useEffect(() => {\n        if (requestedPageStatus === MoviesLoadingStatus.FAILED) {\n            // Store error from that page\n            setErrorAlertText(requestedPageError || 'Something went wrong...');\n            setShowErrorAlert(true);\n        }\n    }, [requestedPage, requestedPageStatus, requestedPageError]);\n\n    const isLoading = requestedPageStatus === MoviesLoadingStatus.LOADING;\n\n    const pagination = <CustomPagination\n        onChange={handlePaginationChange}\n        page={currentPage}\n        requestedPage={requestedPage}\n        loading={isLoading}\n        defaultPage={DEFAULT_PAGE}\n    />;\n\n    return (\n        <>\n            { pagination }\n            {\n\n                <Snackbar open={showErrorAlert} autoHideDuration={6000} onClose={handleCloseErrorAlert}>\n                    <Alert onClose={handleCloseErrorAlert} severity=\"error\">\n                        { errorAlertText }\n                    </Alert>\n                </Snackbar>\n            }\n            {\n                (currentPageStatus === MoviesLoadingStatus.SUCCEEDED) &&\n                    <>\n                        <Box>{\n                            movies.map(movie => <MovieRow key={movie.id} data={movie} />)\n                        }</Box>\n                        pagination\n                    </>\n            }\n        </>\n    );\n};\n\nexport default MoviesList;\n","import { FunctionComponent } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport MoviesList from '../features/movies/MoviesList';\n\nconst App: FunctionComponent = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n        TMDB top 500 movies\n      </Typography>\n      <MoviesList />\n    </Container>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { moviesReducer, MOVIES_NS } from '../features/movies/moviesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    [ MOVIES_NS ]: moviesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}