{"version":3,"sources":["app/hooks.ts","features/movies/moviesApi.ts","features/movies/moviesSlice.ts","features/movies/MovieRow.tsx","common/components/CustomPagination.tsx","features/movies/MoviesList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","API_KEY","process","delay","duration","Promise","resolve","setTimeout","page","a","Math","random","Error","fetch","response","json","data","status","status_code","status_message","results","map","item","id","image","poster_path","title","overview","rating","vote_average","year","release_date","substr","MoviesLoadingStatus","MOVIES_NS","moviesAdapter","createEntityAdapter","selectId","movie","createPage","IDLE","getInitialState","error","initialState","currentPageIndex","requestedPage","pages","fetchMovies","createAsyncThunk","moviesSlice","createSlice","name","reducers","setCurrentPage","state","action","payload","extraReducers","builder","addCase","pending","newPageIndex","meta","arg","LOADING","fulfilled","loadedPageIndex","addMany","SUCCEEDED","rejected","message","FAILED","moviesReducer","reducer","moviesActions","actions","requestMoviesPage","dispatch","getState","selectMoviesSubState","nextPage","includes","globalState","selectCurrentPageIndex","createSelector","selectRequestedPageIndex","selectCurrentPage","pageIndex","selectRequestedPage","selectCurrentPageStatus","selectRequestedPageStatus","selectRequestedPageError","selectMoviesData","movieSelectors","selectMovies","getSelectors","selectAll","useStyles","makeStyles","root","flexGrow","fontSize","textSecondary","poster","width","MovieRow","classes","Box","marginY","Grid","className","container","spacing","component","Paper","alignItems","xs","src","alt","direction","justify","Link","href","target","rel","Typography","variant","color","align","wrapper","display","gridTemplateColumns","pagination","margin","requested","border","CustomPagination","loading","otherProps","CircularProgress","size","Pagination","siblingCount","boundaryCount","count","shape","renderItem","PaginationItem","MoviesList","useDispatch","currentPage","movies","currentPageStatus","requestedPageStatus","requestedPageError","useEffect","useState","showErrorAlert","setShowErrorAlert","errorAlertText","setErrorAlertText","handleCloseErrorAlert","event","reason","isLoading","onChange","defaultPage","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","Container","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c257941b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Movie } from './Movie';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\ntype MoviesResponseItem = {\n    id: string,\n    poster_path: string,\n    title: string,\n    vote_average: string,\n    release_date: string,\n    overview: string,\n};\n\nconst delay = (duration: number = 1000) => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function fetchMoviesRequest (page: number): Promise<Movie[]> {\n    await delay(500 + Math.random() * 2000); // for demonstration purposes\n\n    if (Math.random() > 0.6) {\n        throw new Error('Error for demonstration purposes - retry loading pressing on the desired page number again');\n    }\n\n    const response = await fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&page=${page}`);\n    const data = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(`Failed to load movies, because of [${response.status}] ${data.status_code} ${data.status_message}`);\n    }\n\n    return data.results.map((item: MoviesResponseItem) => ({\n        id: item.id,\n        image: `https://image.tmdb.org/t/p/w300/${item.poster_path}`,\n        title: item.title,\n        overview: item.overview,\n        rating: item.vote_average,\n        year: item.release_date.substr(0, 4)\n    }));\n}\n","import { ActionReducerMapBuilder, createAsyncThunk, createEntityAdapter, createSelector, createSlice, EntityState } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../app/store\";\nimport { Movie } from './Movie';\nimport { fetchMoviesRequest } from './moviesApi';\n\nexport const MOVIES_NS = 'movies';\nexport const DEFAULT_PAGE = 1;\n\nexport enum MoviesLoadingStatus {\n    IDLE,\n    LOADING,\n    SUCCEEDED,\n    FAILED\n}\n\ntype MoviePage = {\n    data: EntityState<Movie>,\n    status: MoviesLoadingStatus,\n    error: string | null\n}\n\ntype MovieState = {\n    currentPageIndex: number,\n    requestedPage: number | null,\n    pages: Record<number, MoviePage>\n}\n\nconst moviesAdapter = createEntityAdapter<Movie>({\n    selectId: (movie) => movie.id,\n    // sortComparer: (a, b) => a.rating - b.rating,\n});\n\nconst createPage = (status: MoviesLoadingStatus = MoviesLoadingStatus.IDLE) => ({\n    data: moviesAdapter.getInitialState(),\n    status,\n    error: null\n});\n\nconst initialState: MovieState = {\n    currentPageIndex: DEFAULT_PAGE,\n    requestedPage: null,\n    pages: {}\n};\n\nconst fetchMovies = createAsyncThunk(`${MOVIES_NS}/fetchMovies`, fetchMoviesRequest);\n\nconst moviesSlice = createSlice({\n    name: MOVIES_NS,\n    initialState: initialState,\n    reducers: {\n        setCurrentPage: (state, action) => {\n            state.currentPageIndex = action.payload;\n            state.requestedPage = null;\n        }\n    },\n    extraReducers: (builder: ActionReducerMapBuilder<MovieState>) => {\n        builder.addCase(fetchMovies.pending, (state: MovieState, action) => {\n            const newPageIndex = action.meta.arg;\n            if (!state.pages[newPageIndex]) {\n                state.pages[newPageIndex] = createPage(MoviesLoadingStatus.LOADING);\n            }\n            const page = state.pages[newPageIndex];\n            page.status = MoviesLoadingStatus.LOADING;\n            state.requestedPage = newPageIndex;\n        });\n        builder.addCase(fetchMovies.fulfilled, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n\n            moviesAdapter.addMany(page.data, action.payload);\n            page.status = MoviesLoadingStatus.SUCCEEDED;\n            if (state.requestedPage === loadedPageIndex) {\n                state.currentPageIndex = loadedPageIndex;\n            }\n        });\n        builder.addCase(fetchMovies.rejected, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n            page.error = action.error.message || 'Request failed';\n            page.status = MoviesLoadingStatus.FAILED;\n        });\n    }\n});\n\nexport const moviesReducer = moviesSlice.reducer;\n\nconst moviesActions = moviesSlice.actions;\n\nexport const requestMoviesPage = (page: number): AppThunk => (dispatch, getState) => {\n    const state = selectMoviesSubState(getState());\n    const nextPage = state.pages[page];\n\n    if (page === state.currentPageIndex && nextPage && nextPage.status === MoviesLoadingStatus.SUCCEEDED) {\n        return;\n    }\n\n    if (nextPage && nextPage.status === MoviesLoadingStatus.SUCCEEDED) {\n        dispatch(moviesActions.setCurrentPage(page));\n        return;\n    }\n\n    if (!nextPage || [MoviesLoadingStatus.IDLE, MoviesLoadingStatus.FAILED].includes(nextPage.status)) {\n        dispatch(fetchMovies(page));\n        return;\n    }\n\n    // Here we just wait for loading\n}\n\nconst selectMoviesSubState = (globalState: { [MOVIES_NS]: MovieState }) => globalState[MOVIES_NS];\nconst selectCurrentPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.currentPageIndex);\nconst selectRequestedPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.requestedPage);\nconst selectCurrentPage = createSelector([selectMoviesSubState, selectCurrentPageIndex], (state: MovieState, pageIndex) => state.pages[pageIndex] || createPage());\nconst selectRequestedPage = createSelector([selectMoviesSubState, selectRequestedPageIndex], (state: MovieState, pageIndex) => typeof pageIndex === 'number' && state.pages[pageIndex] || createPage());\nconst selectCurrentPageStatus = createSelector([selectCurrentPage], (page: MoviePage) => page.status);\nconst selectRequestedPageStatus = createSelector([selectRequestedPage], (page: MoviePage) => page.status);\nconst selectRequestedPageError = createSelector([selectRequestedPage], (page: MoviePage) => page.status === MoviesLoadingStatus.FAILED ? page.error : null);\nconst selectMoviesData = createSelector([selectCurrentPage], (page: MoviePage) => page.status === MoviesLoadingStatus.SUCCEEDED ? page.data : moviesAdapter.getInitialState());\n\nconst { selectAll: selectMovies } = moviesAdapter.getSelectors(selectMoviesData);\n\nexport const movieSelectors = {\n    selectCurrentPageIndex,\n    selectCurrentPageStatus,\n    selectMovies,\n    selectRequestedPageError,\n    selectRequestedPageIndex,\n    selectRequestedPageStatus\n};\n","import { Box, Paper, Grid, makeStyles, Typography, Link } from '@material-ui/core';\nimport { FunctionComponent } from 'react';\nimport { Movie } from './Movie';\n\ntype MovieRowProps = {\n    data: Movie\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1\n    },\n    title: {\n        fontSize: '2.5vw'\n    },\n    overview: {\n        fontSize: '1.5vw'\n    },\n    textSecondary: {\n        fontSize: '1vw'\n    },\n    poster: {\n        width: '100%'\n    }\n});\n\nconst MovieRow: FunctionComponent<MovieRowProps> = ({ data }) => {\n    const classes = useStyles(data);\n\n    return (\n        <Box marginY={2}>\n            <Grid className={classes.root} container spacing={2} component={Paper} alignItems=\"stretch\">\n                <Grid item xs={2}>\n                    <img src={data.image} alt=\"\" className={classes.poster} />\n                </Grid>\n                <Grid item xs={10} container direction=\"column\" justify=\"space-between\">\n                    <Grid item>\n                        <Link href={`https://www.themoviedb.org/movie/${data.id}`} target=\"_blank\" rel=\"noreferrer\">\n                            <Typography variant=\"body2\" className={classes.title}>\n                                {data.title}\n                            </Typography>\n                        </Link>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body2\" className={classes.overview}>\n                            {data.overview}\n                        </Typography>\n                    </Grid>\n                    <Grid item container direction=\"row\" justify=\"space-between\">\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\">\n                                Year: {data.year}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\" align=\"right\">\n                                Rating: {data.rating}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default MovieRow;\n","import { ChangeEvent, FunctionComponent } from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { PaginationItem, Pagination, PaginationRenderItemParams } from '@material-ui/lab';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        display: 'grid',\n        gridTemplateColumns: '30px 1fr'\n    },\n    pagination: {\n        display: 'block',\n        margin: '0 auto',\n        width: 'fit-content'\n    },\n    requested: {\n        border: '1px solid #eee'\n    }\n});\n\ntype CustomPaginationProps = {\n    onChange: (event: ChangeEvent<unknown>, page: number) => void,\n    defaultPage: number,\n    page: number,\n    loading: boolean,\n    requestedPage: number | null\n};\n\nconst CustomPagination: FunctionComponent<CustomPaginationProps> = ({ loading, requestedPage, ...otherProps }) => {\n    const classes = useStyles();\n\n    const renderItem = (item: PaginationRenderItemParams) => {\n        const className = item.page === requestedPage ? classes.requested : '';\n        return <PaginationItem className={className} {...item} />\n    };;\n\n    return (\n        <Box className={classes.wrapper}>\n            {loading ? <CircularProgress size={20} /> : <div />}\n            <Pagination\n                className={classes.pagination}\n                siblingCount={2}\n                boundaryCount={2}\n                count={25}\n                shape=\"rounded\"\n                renderItem={renderItem}\n                {...otherProps}\n            />\n        </Box>\n    );\n};\n\nexport default CustomPagination;\n","import { ChangeEvent, FunctionComponent, useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { movieSelectors, requestMoviesPage, MoviesLoadingStatus, DEFAULT_PAGE } from './moviesSlice';\nimport MovieRow from './MovieRow';\nimport { Box, Snackbar } from '@material-ui/core';\nimport CustomPagination from '../../common/components/CustomPagination';\nimport { Alert } from '@material-ui/lab';\n\nconst MoviesList: FunctionComponent = () => {\n    const dispatch = useAppDispatch();\n    const currentPage = useAppSelector(movieSelectors.selectCurrentPageIndex);\n    const movies   = useAppSelector(movieSelectors.selectMovies);\n    const currentPageStatus = useAppSelector(movieSelectors.selectCurrentPageStatus);\n    const requestedPage = useAppSelector(movieSelectors.selectRequestedPageIndex);\n    const requestedPageStatus = useAppSelector(movieSelectors.selectRequestedPageStatus);\n    const requestedPageError = useAppSelector(movieSelectors.selectRequestedPageError);\n\n    useEffect(() => {\n        if (currentPageStatus === MoviesLoadingStatus.IDLE) {\n            dispatch(requestMoviesPage(currentPage));\n        }\n    }, [currentPageStatus, currentPage, dispatch]);\n\n    const handlePaginationChange = (event: ChangeEvent<unknown>, page: number) => {\n        dispatch(requestMoviesPage(page))\n    };\n\n    const [showErrorAlert, setShowErrorAlert] = useState(false);\n    const [errorAlertText, setErrorAlertText] = useState('Something went wrong...');\n\n    const handleCloseErrorAlert = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setShowErrorAlert(false);\n    };\n\n    useEffect(() => {\n        if (requestedPageStatus === MoviesLoadingStatus.FAILED) {\n            // Store error from that page\n            setErrorAlertText(requestedPageError || 'Something went wrong...');\n            setShowErrorAlert(true);\n        }\n    }, [requestedPage, requestedPageStatus, requestedPageError]);\n\n    const isLoading = requestedPageStatus === MoviesLoadingStatus.LOADING;\n\n    const pagination = <CustomPagination\n        onChange={handlePaginationChange}\n        page={currentPage}\n        requestedPage={requestedPage}\n        loading={isLoading}\n        defaultPage={DEFAULT_PAGE}\n    />;\n\n    return (\n        <>\n            { pagination }\n            {\n\n                <Snackbar open={showErrorAlert} autoHideDuration={6000} onClose={handleCloseErrorAlert}>\n                    <Alert onClose={handleCloseErrorAlert} severity=\"error\">\n                        { errorAlertText }\n                    </Alert>\n                </Snackbar>\n            }\n            {\n                (currentPageStatus === MoviesLoadingStatus.SUCCEEDED) &&\n                    <>\n                        <Box>{\n                            movies.map(movie => <MovieRow key={movie.id} data={movie} />)\n                        }</Box>\n                        pagination\n                    </>\n            }\n        </>\n    );\n};\n\nexport default MoviesList;\n","import { FunctionComponent } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport MoviesList from '../features/movies/MoviesList';\n\nconst App: FunctionComponent = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n        TMDB top 500 movies\n      </Typography>\n      <MoviesList />\n    </Container>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { moviesReducer, MOVIES_NS } from '../features/movies/moviesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    [ MOVIES_NS ]: moviesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}