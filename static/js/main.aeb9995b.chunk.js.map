{"version":3,"sources":["app/hooks.ts","features/movies/moviesApi.ts","features/movies/moviesSlice.ts","features/movies/MovieRow.tsx","common/components/CustomPagination.tsx","features/movies/MoviesList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","API_KEY","process","delay","duration","Promise","resolve","setTimeout","page","a","Math","random","Error","fetch","response","json","data","status","status_code","status_message","results","map","item","id","image","poster_path","title","overview","rating","vote_average","year","release_date","substr","MoviesLoadingStatus","MOVIES_NS","FAVORIES_LOCAL_STORAGE_KEY","moviesAdapter","createEntityAdapter","selectId","movie","createPage","IDLE","getInitialState","error","initialState","currentPageIndex","requestedPage","pages","favorites","parsed","stored","String","localStorage","getItem","JSON","parse","e","Array","isArray","every","readFavorites","fetchMovies","createAsyncThunk","moviesSlice","createSlice","name","reducers","setFavorite","state","action","serialized","flag","payload","presented","includes","push","index","findIndex","splice","stringify","setItem","setCurrentPage","extraReducers","builder","addCase","pending","newPageIndex","meta","arg","LOADING","fulfilled","loadedPageIndex","addMany","SUCCEEDED","rejected","message","FAILED","moviesReducer","reducer","moviesActions","actions","requestMoviesPage","dispatch","getState","selectMoviesSubState","nextPage","rootState","selectFavorites","createSelector","selectCurrentPageIndex","selectRequestedPageIndex","selectCurrentPage","pageIndex","selectRequestedPage","selectCurrentPageStatus","selectRequestedPageStatus","selectRequestedPageError","selectMoviesData","getSelectors","selectMovieIds","selectIds","movieSelectors","selectMovieById","selectById","selectMovieFavoriteFlag","useStyles","makeStyles","root","flexGrow","favorite","backgroundColor","poster","width","head","display","gridTemplateColumns","fontSize","textSecondary","MovieRow","movieId","classes","movieData","Box","marginY","Grid","className","container","spacing","component","Paper","alignItems","xs","src","alt","direction","justify","Link","href","target","rel","Typography","variant","Rating","value","onChange","event","newValue","max","color","align","wrapper","pagination","margin","requested","border","CustomPagination","loading","otherProps","CircularProgress","size","Pagination","siblingCount","boundaryCount","count","shape","renderItem","PaginationItem","MoviesList","currentPage","movieIds","currentPageStatus","requestedPageStatus","requestedPageError","useEffect","useState","showErrorAlert","setShowErrorAlert","errorAlertText","setErrorAlertText","handleCloseErrorAlert","reason","isLoading","defaultPage","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","Container","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.aeb9995b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Movie } from './Movie';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\ntype MoviesResponseItem = {\n    id: string,\n    poster_path: string,\n    title: string,\n    vote_average: string,\n    release_date: string,\n    overview: string,\n};\n\nconst delay = (duration: number = 1000) => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function fetchMoviesRequest (page: number): Promise<Movie[]> {\n    await delay(500 + Math.random() * 2000); // for demonstration purposes\n\n    if (Math.random() > 0.6) {\n        throw new Error('Error for demonstration purposes - retry loading pressing on the desired page number again');\n    }\n\n    const response = await fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&page=${page}`);\n    const data = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(`Failed to load movies, because of [${response.status}] ${data.status_code} ${data.status_message}`);\n    }\n\n    return data.results.map((item: MoviesResponseItem) => ({\n        id: item.id,\n        image: `https://image.tmdb.org/t/p/w300/${item.poster_path}`,\n        title: item.title,\n        overview: item.overview,\n        rating: item.vote_average,\n        year: item.release_date.substr(0, 4)\n    }));\n}\n","import { ActionReducerMapBuilder, createAsyncThunk, createEntityAdapter, createSelector, createSlice, EntityId, EntityState } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\nimport { Movie } from './Movie';\nimport { fetchMoviesRequest } from './moviesApi';\n\nexport const MOVIES_NS = 'movies';\nexport const DEFAULT_PAGE = 1;\nconst FAVORIES_LOCAL_STORAGE_KEY = 'top500_favorites';\n\nexport enum MoviesLoadingStatus {\n    IDLE,\n    LOADING,\n    SUCCEEDED,\n    FAILED\n}\n\ntype MoviePage = {\n    data: EntityState<Movie>,\n    status: MoviesLoadingStatus,\n    error: string | null\n}\n\ntype MovieState = {\n    currentPageIndex: number,\n    requestedPage: number | null,\n    pages: Record<number, MoviePage>,\n    favorites: EntityId[]\n}\n\nconst moviesAdapter = createEntityAdapter<Movie>({\n    selectId: (movie) => movie.id,\n    // sortComparer: (a, b) => a.rating - b.rating,\n});\n\nconst createPage = (status: MoviesLoadingStatus = MoviesLoadingStatus.IDLE) => ({\n    data: moviesAdapter.getInitialState(),\n    status,\n    error: null\n});\n\nconst readFavorites = () => {\n    const stored = String(localStorage.getItem(FAVORIES_LOCAL_STORAGE_KEY));\n    let parsed;\n    try {\n        parsed = JSON.parse(stored);\n    } catch (e) {\n        // just ignore any pare errors\n    }\n\n    if (Array.isArray(parsed) && parsed.every(item => typeof item === 'number')) {\n        return parsed;\n    }\n\n    return [];\n}\n\nconst initialState: MovieState = {\n    currentPageIndex: DEFAULT_PAGE,\n    requestedPage: null,\n    pages: {},\n    favorites: readFavorites()\n};\n\nconst fetchMovies = createAsyncThunk(`${MOVIES_NS}/fetchMovies`, fetchMoviesRequest);\n\nconst moviesSlice = createSlice({\n    name: MOVIES_NS,\n    initialState: initialState,\n    reducers: {\n        setFavorite (state, action) {\n            const flag = action.payload.flag;\n            const id = action.payload.id;\n            const presented = state.favorites.includes(id);\n\n            if (flag) {\n                if (presented) return state;\n\n                state.favorites.push(id);\n            } else {\n                if (!presented) return state;\n\n                const index = state.favorites.findIndex(item => item === id);\n                state.favorites.splice(index, 1);\n            }\n\n            let serialized;\n            try {\n                serialized = JSON.stringify(state.favorites);\n            } catch (e) {\n                serialized = '[]';\n                state.favorites = [];\n            }\n\n            localStorage.setItem(FAVORIES_LOCAL_STORAGE_KEY, serialized);\n        },\n        setCurrentPage (state, action) {\n            state.currentPageIndex = action.payload;\n            state.requestedPage = null;\n        },\n    },\n    extraReducers: (builder: ActionReducerMapBuilder<MovieState>) => {\n        builder.addCase(fetchMovies.pending, (state: MovieState, action) => {\n            const newPageIndex = action.meta.arg;\n            if (!state.pages[newPageIndex]) {\n                state.pages[newPageIndex] = createPage(MoviesLoadingStatus.LOADING);\n            }\n            const page = state.pages[newPageIndex];\n            page.status = MoviesLoadingStatus.LOADING;\n            state.requestedPage = newPageIndex;\n        });\n        builder.addCase(fetchMovies.fulfilled, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n\n            moviesAdapter.addMany(page.data, action.payload);\n            page.status = MoviesLoadingStatus.SUCCEEDED;\n            if (state.requestedPage === loadedPageIndex) {\n                state.currentPageIndex = loadedPageIndex;\n            }\n        });\n        builder.addCase(fetchMovies.rejected, (state: MovieState, action) => {\n            const loadedPageIndex = action.meta.arg;\n            const page = state.pages[loadedPageIndex];\n            page.error = action.error.message || 'Request failed';\n            page.status = MoviesLoadingStatus.FAILED;\n        });\n    }\n});\n\nexport const moviesReducer = moviesSlice.reducer;\n\nexport const moviesActions = moviesSlice.actions;\n\nexport const requestMoviesPage = (page: number): AppThunk => (dispatch, getState) => {\n    const state = selectMoviesSubState(getState());\n    const nextPage = state.pages[page];\n\n    if (page === state.currentPageIndex && nextPage && nextPage.status === MoviesLoadingStatus.SUCCEEDED) {\n        return;\n    }\n\n    if (nextPage && nextPage.status === MoviesLoadingStatus.SUCCEEDED) {\n        dispatch(moviesActions.setCurrentPage(page));\n        return;\n    }\n\n    if (!nextPage || [MoviesLoadingStatus.IDLE, MoviesLoadingStatus.FAILED].includes(nextPage.status)) {\n        dispatch(fetchMovies(page));\n        return;\n    }\n\n    // Here we just wait for loading\n}\n\nconst selectMoviesSubState = (rootState: RootState) => rootState[MOVIES_NS];\nconst selectFavorites = createSelector([selectMoviesSubState], (state: MovieState) => state.favorites);\nconst selectCurrentPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.currentPageIndex);\nconst selectRequestedPageIndex = createSelector([selectMoviesSubState], (state: MovieState) => state.requestedPage);\nconst selectCurrentPage = createSelector([selectMoviesSubState, selectCurrentPageIndex], (state: MovieState, pageIndex) => state.pages[pageIndex] || createPage());\nconst selectRequestedPage = createSelector([selectMoviesSubState, selectRequestedPageIndex], (state: MovieState, pageIndex) => typeof pageIndex === 'number' && state.pages[pageIndex] || createPage());\nconst selectCurrentPageStatus = createSelector([selectCurrentPage], (page: MoviePage) => page.status);\nconst selectRequestedPageStatus = createSelector([selectRequestedPage], (page: MoviePage) => page.status);\nconst selectRequestedPageError = createSelector([selectRequestedPage], (page: MoviePage) => page.status === MoviesLoadingStatus.FAILED ? page.error : null);\nconst selectMoviesData = createSelector([selectCurrentPage], (page: MoviePage) => page.status === MoviesLoadingStatus.SUCCEEDED ? page.data : moviesAdapter.getInitialState());\n\nconst {\n    selectIds: selectMovieIds,\n    selectById: selectMovieById,\n} = moviesAdapter.getSelectors(selectMoviesData);\n\nconst selectMovieFavoriteFlag = createSelector([selectFavorites, (state: RootState, id: EntityId) => id], (favorites: EntityId[], id: EntityId) => favorites.includes(id));\n\nexport const movieSelectors = {\n    selectCurrentPageIndex,\n    selectCurrentPageStatus,\n    selectMovieById,\n    selectMovieFavoriteFlag,\n    selectMovieIds,\n    selectRequestedPageError,\n    selectRequestedPageIndex,\n    selectRequestedPageStatus,\n};\n","import { Box, Paper, Grid, makeStyles, Typography, Link } from '@material-ui/core';\nimport { Rating } from '@material-ui/lab';\nimport { EntityId } from '@reduxjs/toolkit';\nimport { ChangeEvent, FunctionComponent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { moviesActions, movieSelectors } from './moviesSlice';\n\ntype MovieRowProps = {\n    movieId: EntityId\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1\n    },\n    favorite: {\n        backgroundColor: '#fbf7e4'\n    },\n    poster: {\n        width: '100%'\n    },\n    head: {\n        display: 'grid',\n        gridTemplateColumns: '1fr 30px'\n    },\n    title: {\n        fontSize: '2.5vw'\n    },\n    overview: {\n        fontSize: '1.5vw'\n    },\n    textSecondary: {\n        fontSize: '1vw'\n    },\n});\n\nconst MovieRow: FunctionComponent<MovieRowProps> = ({ movieId }) => {\n    const classes = useStyles();\n    const movieData = useAppSelector((state) => movieSelectors.selectMovieById(state, movieId))!;\n    const favorite = useAppSelector((state) => movieSelectors.selectMovieFavoriteFlag(state, movieId));\n    const dispatch = useAppDispatch();\n\n    const handleFavChange = (event: ChangeEvent<unknown>, newValue: number | null) => {\n        dispatch(moviesActions.setFavorite({ id: movieId, flag: !!newValue }));\n    };\n\n    return (\n        <Box marginY={2}>\n            <Grid className={`${classes.root} ${favorite ? classes.favorite : ''}`} container spacing={2} component={Paper} alignItems=\"stretch\">\n                <Grid item xs={2}>\n                    <img src={movieData.image} alt=\"\" className={classes.poster} />\n                </Grid>\n                <Grid item xs={10} container direction=\"column\" justify=\"space-between\">\n                    <Grid item className={classes.head}>\n                        <Box>\n                            <Link href={`https://www.themoviedb.org/movie/${movieData.id}`} target=\"_blank\" rel=\"noreferrer\">\n                                <Typography className={classes.title} variant=\"body2\" component=\"span\">\n                                    {movieData.title}\n                                </Typography>\n                            </Link>\n                        </Box>\n                        <Rating\n                            name={`favorite-${movieId}`}\n                            value={favorite ? 1 : 0}\n                            onChange={handleFavChange}\n                            max={1}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body2\" className={classes.overview}>\n                            {movieData.overview}\n                        </Typography>\n                    </Grid>\n                    <Grid item container direction=\"row\" justify=\"space-between\">\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\">\n                                Year: {movieData.year}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body2\" className={classes.textSecondary} color=\"textSecondary\" align=\"right\">\n                                Rating: {movieData.rating}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default MovieRow;\n","import { ChangeEvent, FunctionComponent } from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { PaginationItem, Pagination, PaginationRenderItemParams } from '@material-ui/lab';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        display: 'grid',\n        gridTemplateColumns: '30px 1fr'\n    },\n    pagination: {\n        display: 'block',\n        margin: '0 auto',\n        width: 'fit-content'\n    },\n    requested: {\n        border: '1px solid #eee'\n    }\n});\n\ntype CustomPaginationProps = {\n    onChange: (event: ChangeEvent<unknown>, page: number) => void,\n    defaultPage: number,\n    page: number,\n    loading: boolean,\n    requestedPage: number | null\n};\n\nconst CustomPagination: FunctionComponent<CustomPaginationProps> = ({ loading, requestedPage, ...otherProps }) => {\n    const classes = useStyles();\n\n    const renderItem = (item: PaginationRenderItemParams) => {\n        const className = item.page === requestedPage ? classes.requested : '';\n        return <PaginationItem className={className} {...item} />\n    };;\n\n    return (\n        <Box className={classes.wrapper}>\n            {loading ? <CircularProgress size={20} /> : <div />}\n            <Pagination\n                className={classes.pagination}\n                siblingCount={2}\n                boundaryCount={2}\n                count={25}\n                shape=\"rounded\"\n                renderItem={renderItem}\n                {...otherProps}\n            />\n        </Box>\n    );\n};\n\nexport default CustomPagination;\n","import { ChangeEvent, FunctionComponent, useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { movieSelectors, requestMoviesPage, MoviesLoadingStatus, DEFAULT_PAGE } from './moviesSlice';\nimport MovieRow from './MovieRow';\nimport { Box, Snackbar } from '@material-ui/core';\nimport CustomPagination from '../../common/components/CustomPagination';\nimport { Alert } from '@material-ui/lab';\n\nconst MoviesList: FunctionComponent = () => {\n    const dispatch = useAppDispatch();\n    const currentPage = useAppSelector(movieSelectors.selectCurrentPageIndex);\n    const movieIds = useAppSelector(movieSelectors.selectMovieIds);\n    const currentPageStatus = useAppSelector(movieSelectors.selectCurrentPageStatus);\n    const requestedPage = useAppSelector(movieSelectors.selectRequestedPageIndex);\n    const requestedPageStatus = useAppSelector(movieSelectors.selectRequestedPageStatus);\n    const requestedPageError = useAppSelector(movieSelectors.selectRequestedPageError);\n\n    useEffect(() => {\n        if (currentPageStatus === MoviesLoadingStatus.IDLE) {\n            dispatch(requestMoviesPage(currentPage));\n        }\n    }, [currentPageStatus, currentPage, dispatch]);\n\n    const handlePaginationChange = (event: ChangeEvent<unknown>, page: number) => {\n        dispatch(requestMoviesPage(page))\n    };\n\n    const [showErrorAlert, setShowErrorAlert] = useState(false);\n    const [errorAlertText, setErrorAlertText] = useState('Something went wrong...');\n\n    const handleCloseErrorAlert = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setShowErrorAlert(false);\n    };\n\n    useEffect(() => {\n        if (requestedPageStatus === MoviesLoadingStatus.FAILED) {\n            // Store error from that page\n            setErrorAlertText(requestedPageError || 'Something went wrong...');\n            setShowErrorAlert(true);\n        }\n    }, [requestedPage, requestedPageStatus, requestedPageError]);\n\n    const isLoading = requestedPageStatus === MoviesLoadingStatus.LOADING;\n\n    const pagination = <CustomPagination\n        onChange={handlePaginationChange}\n        page={currentPage}\n        requestedPage={requestedPage}\n        loading={isLoading}\n        defaultPage={DEFAULT_PAGE}\n    />;\n\n    return (\n        <>\n            { pagination }\n            {\n\n                <Snackbar open={showErrorAlert} autoHideDuration={6000} onClose={handleCloseErrorAlert}>\n                    <Alert onClose={handleCloseErrorAlert} severity=\"error\">\n                        { errorAlertText }\n                    </Alert>\n                </Snackbar>\n            }\n            {\n                (currentPageStatus === MoviesLoadingStatus.SUCCEEDED) &&\n                    <>\n                        <Box>{\n                            movieIds.map(id => <MovieRow key={id} movieId={id} />)\n                        }</Box>\n                        pagination\n                    </>\n            }\n        </>\n    );\n};\n\nexport default MoviesList;\n","import { FunctionComponent } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport MoviesList from '../features/movies/MoviesList';\n\nconst App: FunctionComponent = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n        TMDB top 500 movies\n      </Typography>\n      <MoviesList />\n    </Container>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { moviesReducer, MOVIES_NS } from '../features/movies/moviesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    [ MOVIES_NS ]: moviesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}